{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"搭建免费博客HEXO+GitHub","slug":"搭建免费博客HEXO+GitHub","date":"2018-08-21T12:19:32.000Z","updated":"2018-08-21T10:40:35.291Z","comments":true,"path":"2018/08/21/搭建免费博客HEXO+GitHub/","link":"","permalink":"http://yoursite.com/2018/08/21/搭建免费博客HEXO+GitHub/","excerpt":"","text":"原料 Node.js ——简单的说就是运行在服务端的 JavaScript, 所以这个构建后端服务的 Nexo —— 一款基于Node.js的静态博客框架，这个是台湾人创建的 GitHub Pages —— GitHub全球最大的Gay站，我们用的是GitHub中的仓库，因为它是免费的.. 步骤 创建Github仓库 安装Git 创建SSH秘钥 配置git的用户名和邮箱 右键打开gitBash,12git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot; 看本地有秘钥没 1cd ~/. ssh 本地创建秘钥 1ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 中间会提示你是否需要设置密码，可输可不输 上传到GitHub复制公钥到系统粘贴板中 1clip &lt; ~/.ssh/id_rsa.pub +测试 1ssh -T git@github.com 如果提示你 yes /no? 那就是yes 安装Node.js 下载地址:官网 安装Hexo 安装nexo 1npm install hexo-cli -g 安装部署工具 1npm install hexo-deployer-git --save 初始化 1hexo init 启动 12345hexo generatehexo server可以一句话hexo g -d 常用命令现在来介绍常用的Hexo 命令 1234567891011121314151617npm install hexo -g #安装Hexonpm update hexo -g #升级 hexo init #初始化博客命令简写hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。 浏览器访问地址http://localhost:4000 上传到Github 配置根目录下 _config.yml 1234deploy:type: gitrepository: git@github.com:username/username.github.io.gitbranch: master 上传github 123hexo clean hexo g hexo d 最后一条命令是部署到github访问 http://xxxx.github.io 绑定域名 更换主题 Themes 官网 如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：Themes 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：1git clone https://github.com/iissnan/hexo-theme-next themes/next 发布文章 命令行 1hexo n &quot;博客名字&quot; 直接做好markdown 文件，放在nexo的source_posts目录下 1source\\_posts OSS服务器","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"搭建博客","slug":"搭建博客","permalink":"http://yoursite.com/tags/搭建博客/"},{"name":"免费","slug":"免费","permalink":"http://yoursite.com/tags/免费/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]},{"title":"","slug":"test_07_学习曲线_交叉验证","date":"2018-08-21T07:23:00.569Z","updated":"2018-08-17T07:29:00.000Z","comments":true,"path":"2018/08/21/test_07_学习曲线_交叉验证/","link":"","permalink":"http://yoursite.com/2018/08/21/test_07_学习曲线_交叉验证/","excerpt":"","text":"12345from sklearn.model_selection import learning_curve #学习曲线模块from sklearn.datasets import load_digits #digits数据集from sklearn.svm import SVC #Support Vector Classifierimport matplotlib.pyplot as plt #可视化模块import numpy as np 1234# 手写数字，0-9，共1797样本，每个样本由64个特征组合（8*8），每个特征值用0-16表示digits = load_digits()X = digits.datay = digits.target 123456# cv=10 交叉验证集分成10个，采用均方差度量损失，#平均每一轮所得到的平均方差(共5轮，分别为样本10%、25%、50%、75%、100%)train_sizes, train_loss, test_loss = learning_curve( # SVM 中的参数，一个C 大间距，一个gammam, gamma 不是高斯半径 是 1/(2*sigma^2),都是越大越容易过拟合 SVC(gamma=0.0001), X, y, cv=10, scoring='neg_mean_squared_error', train_sizes=[0.1, 0.25, 0.5, 0.75, 1]) 123# axis=1 对行进行操作，由于上面的cv=10train_loss_mean = -np.mean(train_loss, axis=1)test_loss_mean = -np.mean(test_loss, axis=1) 12345678910# train_sizes 横坐标，train_loss_mean 纵坐标，形状‘o-’,红色plt.plot(train_sizes, train_loss_mean, 'o-', color=\"r\", label=\"Training\")plt.plot(train_sizes, test_loss_mean, 'o-', color=\"g\", label=\"Cross-validation\")plt.xlabel(\"Training examples\")plt.ylabel(\"Loss\")# 将图标签——图例放到最佳的位置plt.legend(loc=\"best\") &lt;matplotlib.legend.Legend at 0x523a668&gt;","categories":[],"tags":[],"keywords":[]},{"title":"第一篇文章","slug":"第一篇文章","date":"2018-08-21T01:15:30.000Z","updated":"2018-08-21T01:15:30.973Z","comments":true,"path":"2018/08/21/第一篇文章/","link":"","permalink":"http://yoursite.com/2018/08/21/第一篇文章/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2018-08-20T09:53:30.449Z","updated":"2018-08-20T09:53:30.449Z","comments":true,"path":"2018/08/20/hello-world/","link":"","permalink":"http://yoursite.com/2018/08/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]},{"title":"第99篇文章","slug":"第99篇文章","date":"2018-07-21T01:15:30.000Z","updated":"2018-07-01T02:06:49.356Z","comments":true,"path":"2018/07/21/第99篇文章/","link":"","permalink":"http://yoursite.com/2018/07/21/第99篇文章/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"保存模型","slug":"test_09_保存模型_save","date":"2018-01-01T01:15:30.000Z","updated":"2018-08-21T07:11:24.388Z","comments":true,"path":"2018/01/01/test_09_保存模型_save/","link":"","permalink":"http://yoursite.com/2018/01/01/test_09_保存模型_save/","excerpt":"","text":"12from sklearn import svmfrom sklearn import datasets 1234clf = svm.SVC()iris = datasets.load_iris()X, y = iris.data, iris.targetclf.fit(X,y) SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape=&apos;ovr&apos;, degree=3, gamma=&apos;auto&apos;, kernel=&apos;rbf&apos;, max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False) 12345# method 1:pickleimport pickle# 保存模型with open('save/clf.pickle','wb') as f: pickle.dump(clf,f) 1234# 载入模型with open('save/clf.pickle','rb') as f: clf2 = pickle.load(f)clf2.predict(X[0:4]) 1234# method 2:joblib 第二种方法 from sklearn.externals import joblib# save 更加快，相对于原生的python的picklejoblib.dump(clf,'save/clf.pkl') 123# restore 载入模型clf3 = joblib.load('save/clf.pkl')clf3.predict(X[0:4]) array([0, 0, 0, 0])","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"},{"name":"sklearn","slug":"sklearn","permalink":"http://yoursite.com/tags/sklearn/"},{"name":"保存模型","slug":"保存模型","permalink":"http://yoursite.com/tags/保存模型/"}],"keywords":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"}]}]}